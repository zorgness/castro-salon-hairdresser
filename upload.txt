https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTMuUIFk0w4Agm7EVuAws8T1CIQMvVqUxJo7A&usqp=CAU

import { Storage } from 'aws-amplify';
...
async pushImgToS3(uri, filename) {
 if (uri === null) return
 await Storage.put(filename, uri, {
     level: 'protected',
     contentType: 'image/*'
 })
     .then(result => console.log(result.key))
     .catch(err => console.log(err));
}
...

import uuid from 'uuid/v4';
...
constructor() {
 super()
 this.handleAdd = this.handleAdd.bind(this)
}
handleAdd = async (event) => {
 event.persist();
 // Check there is some files to upload
 if (!event || !event.target || !event.target.files) return
const filesLength = event.target.files.length;
 // Loop through all selected files
 for (let i = 0; i < filesLength; i++) {
  const file = event.target.files[i];
  const filename = file.name.toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, '');
  const fileExtension = file.name.split('.').pop();
  // Define the image name
  let mainImgName = filename + '-' + uuid() + '.' + fileExtension;
  // Push the image to S3
  await this.pushImgToS3(file, mainImgName)
 }
}

readFileAsync(file) {
 return new Promise((resolve, reject) => {
  let reader = new FileReader();
  reader.onload = () => {
   resolve(reader.result);
  };
  reader.onerror = reject;
  reader.readAsDataURL(file);
 })
}
loadImgAsync(imgSrc) {
 return new Promise((resolve, reject) => {
  let img = new Image();
  img.onload = () => {
   resolve(img);
  };
  img.onerror = reject;
  img.src = imgSrc;
 })
}
imgToBlobAsync(img, canvas) {
 return new Promise((resolve, reject) => {
  const ctxMain = canvas.getContext('2d');
  ctxMain.drawImage(img, 0, 0, canvas.width, canvas.height);
  ctxMain.canvas.toBlob(async (blob) => {
   resolve(blob)
  }, 'image/*');
 })
}




function fileChange(e) {
     document.getElementById('inp_img').value = '';

     var file = e.target.files[0];

     if (file.type == "image/jpeg" || file.type == "image/png") {

        var reader = new FileReader();
        reader.onload = function(readerEvent) {

           var image = new Image();
           image.onload = function(imageEvent) {
              var max_size = 300;
              var w = image.width;
              var h = image.height;

              if (w > h) {  if (w > max_size) { h*=max_size/w; w=max_size; }
              } else     {  if (h > max_size) { w*=max_size/h; h=max_size; } }

              var canvas = document.createElement('canvas');
              canvas.width = w;
              canvas.height = h;
              canvas.getContext('2d').drawImage(image, 0, 0, w, h);

              if (file.type == "image/jpeg") {
                 var dataURL = canvas.toDataURL("image/jpeg", 1.0);
              } else {
                 var dataURL = canvas.toDataURL("image/png");
              }
              document.getElementById('inp_img').value = dataURL;
           }
           image.src = readerEvent.target.result;
        }
        reader.readAsDataURL(file);
     } else {
        document.getElementById('inp_file').value = '';
        alert('Please only select images in JPG- or PNG-format.');
     }
  }

  document.getElementById('inp_file').addEventListener('change', fileChange, false);


   // to put in another file
    const dataURLtoFile  = (dataurl, filename) =>  {

      let arr = dataurl.split(','),
          mime = arr[0].match(/:(.*?);/)[1],
          bstr = atob(arr[1]),
          n = bstr.length,
          u8arr = new Uint8Array(n);

      while(n--){
          u8arr[n] = bstr.charCodeAt(n);
      }

      return new File([u8arr], filename, {type:mime});
    }
